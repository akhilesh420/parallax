{
    "sourceFile": "src/app/services/firebase.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 79,
            "patches": [
                {
                    "date": 1656713612870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1656713954593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,15 @@\n import { Injectable } from '@angular/core';\n import { AngularFirestore, AngularFirestoreCollection } from '@angular/fire/compat/firestore';\n+import { Observable } from 'rxjs';\n \n @Injectable({\n   providedIn: 'root'\n })\n export class FirebaseService {\n \n   constructor(private firestore: AngularFirestore) { }\n \n-  test(): AngularFirestoreCollection {\n-    return this.firestore.collection('sessions')\n+  test(): Observable<any[]> {\n+    return this.firestore.collection('sessions').valueChanges()\n   }\n }\n"
                },
                {
                    "date": 1656715251103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,8 @@\n export class FirebaseService {\n \n   constructor(private firestore: AngularFirestore) { }\n \n-  test(): Observable<any[]> {\n+  signIn(): Observable<any[]> {\n     return this.firestore.collection('sessions').valueChanges()\n   }\n }\n"
                },
                {
                    "date": 1656715289667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,19 @@\n import { Injectable } from '@angular/core';\n import { AngularFirestore, AngularFirestoreCollection } from '@angular/fire/compat/firestore';\n+import { AngularFireAuth } from '@angular/fire/compat/auth';\n import { Observable } from 'rxjs';\n \n @Injectable({\n   providedIn: 'root'\n })\n export class FirebaseService {\n \n-  constructor(private firestore: AngularFirestore) { }\n+  constructor(\n+    private auth: AngularFireAuth,\n+    private firestore: AngularFirestore\n+  ) { }\n \n-  signIn(): Observable<any[]> {\n-    return this.firestore.collection('sessions').valueChanges()\n+  signIn() {\n+\n   }\n }\n"
                },
                {
                    "date": 1656715399121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,7 +13,14 @@\n     private firestore: AngularFirestore\n   ) { }\n \n   signIn() {\n-\n+    this.auth.signInAnonymously()\n+    .then(() => {\n+      console.log('logged in')\n+    })\n+    .catch((error) => {\n+      const errorCode = error.code;\n+      const errorMessage = error.message;\n+    });\n   }\n }\n"
                },
                {
                    "date": 1656715609635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,19 @@\n     this.auth.signInAnonymously()\n     .then(() => {\n       console.log('logged in')\n     })\n-    .catch((error) => {\n-      const errorCode = error.code;\n-      const errorMessage = error.message;\n-    });\n+    .catch(error => this.handleError(error));\n   }\n+\n+    // --------------------------------------- Error handling ---------------------------------------\n+    handleError(error: any) {\n+      let errorMessage = 'Unknown error!';\n+      if (error.error instanceof ErrorEvent) {\n+        // Client-side errors\n+        errorMessage = `Error: ${error.error.message}`;\n+      } else {\n+        // Server-side errors\n+        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n+      }\n+    }\n }\n"
                },
                {
                    "date": 1656715622539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,6 +30,8 @@\n       } else {\n         // Server-side errors\n         errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n       }\n+      console.log(errorMessage)\n+      return errorMessage\n     }\n }\n"
                },
                {
                    "date": 1656715638920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,7 +31,7 @@\n         // Server-side errors\n         errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n       }\n       console.log(errorMessage)\n-      return errorMessage\n+      throw(errorMessage)\n     }\n }\n"
                },
                {
                    "date": 1656715684738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \n   signIn() {\n     this.auth.signInAnonymously()\n     .then(() => {\n-      console.log('logged in')\n+      console.log('signed in')\n     })\n     .catch(error => this.handleError(error));\n   }\n \n"
                },
                {
                    "date": 1656716266266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,26 @@\n import { Injectable } from '@angular/core';\n import { AngularFirestore, AngularFirestoreCollection } from '@angular/fire/compat/firestore';\n import { AngularFireAuth } from '@angular/fire/compat/auth';\n-import { Observable } from 'rxjs';\n+import { BehaviorSubject } from 'rxjs'\n+import { User } from \"firebase/auth\";\n \n @Injectable({\n   providedIn: 'root'\n })\n export class FirebaseService {\n \n+  private uid: BehaviorSubject<string | null> = new BehaviorSubject<string | null>(null);\n+\n   constructor(\n     private auth: AngularFireAuth,\n     private firestore: AngularFirestore\n   ) { }\n \n   signIn() {\n     this.auth.signInAnonymously()\n-    .then(() => {\n+    .then((user) => {\n+      this.uid.next(user.user ? user.user.uid : null);\n       console.log('signed in')\n     })\n     .catch(error => this.handleError(error));\n   }\n"
                },
                {
                    "date": 1656716282166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \n   signIn() {\n     this.auth.signInAnonymously()\n     .then((user) => {\n-      this.uid.next(user.user ? user.user.uid : null);\n+      this.uid.next(!!user.user ? user.user.uid : null);\n       console.log('signed in')\n     })\n     .catch(error => this.handleError(error));\n   }\n"
                },
                {
                    "date": 1656716294404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n   signIn() {\n     this.auth.signInAnonymously()\n     .then((user) => {\n       this.uid.next(!!user.user ? user.user.uid : null);\n-      console.log('signed in')\n+      console.log('signed in', this.uid.value)\n     })\n     .catch(error => this.handleError(error));\n   }\n \n"
                },
                {
                    "date": 1656716301318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n   signIn() {\n     this.auth.signInAnonymously()\n     .then((user) => {\n       this.uid.next(!!user.user ? user.user.uid : null);\n-      console.log('signed in', this.uid.value)\n+      console.log('signed in')\n     })\n     .catch(error => this.handleError(error));\n   }\n \n"
                },
                {
                    "date": 1656716547524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,14 +16,12 @@\n     private firestore: AngularFirestore\n   ) { }\n \n   signIn() {\n-    this.auth.signInAnonymously()\n-    .then((user) => {\n-      this.uid.next(!!user.user ? user.user.uid : null);\n-      console.log('signed in')\n-    })\n+    this.auth.signInAnonymously().then()\n     .catch(error => this.handleError(error));\n+\n+    this.auth.onAuthStateChanged(user => this.uid.next(!user ? null : user.uid));\n   }\n \n     // --------------------------------------- Error handling ---------------------------------------\n     handleError(error: any) {\n"
                },
                {
                    "date": 1656716553124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,12 +16,12 @@\n     private firestore: AngularFirestore\n   ) { }\n \n   signIn() {\n+    this.auth.onAuthStateChanged(user => this.uid.next(!user ? null : user.uid));\n+\n     this.auth.signInAnonymously().then()\n     .catch(error => this.handleError(error));\n-\n-    this.auth.onAuthStateChanged(user => this.uid.next(!user ? null : user.uid));\n   }\n \n     // --------------------------------------- Error handling ---------------------------------------\n     handleError(error: any) {\n"
                },
                {
                    "date": 1656716574375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,12 @@\n     private firestore: AngularFirestore\n   ) { }\n \n   signIn() {\n-    this.auth.onAuthStateChanged(user => this.uid.next(!user ? null : user.uid));\n+    this.auth.onAuthStateChanged(user => {\n+      this.uid.next(!user ? null : user.uid)\n+      console.log(this.uid.value);\n+    });\n \n     this.auth.signInAnonymously().then()\n     .catch(error => this.handleError(error));\n   }\n"
                },
                {
                    "date": 1656716608502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,13 +16,10 @@\n     private firestore: AngularFirestore\n   ) { }\n \n   signIn() {\n-    this.auth.onAuthStateChanged(user => {\n-      this.uid.next(!user ? null : user.uid)\n-      console.log(this.uid.value);\n-    });\n-\n+    this.auth.onAuthStateChanged(user => this.uid.next(!user ? null : user.uid));\n+    \n     this.auth.signInAnonymously().then()\n     .catch(error => this.handleError(error));\n   }\n \n"
                },
                {
                    "date": 1656716628720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,10 +16,12 @@\n     private firestore: AngularFirestore\n   ) { }\n \n   signIn() {\n+    // Update uid on auth change\n     this.auth.onAuthStateChanged(user => this.uid.next(!user ? null : user.uid));\n-    \n+\n+    // Sign in anonymously\n     this.auth.signInAnonymously().then()\n     .catch(error => this.handleError(error));\n   }\n \n"
                },
                {
                    "date": 1656716634326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,18 +24,18 @@\n     this.auth.signInAnonymously().then()\n     .catch(error => this.handleError(error));\n   }\n \n-    // --------------------------------------- Error handling ---------------------------------------\n-    handleError(error: any) {\n-      let errorMessage = 'Unknown error!';\n-      if (error.error instanceof ErrorEvent) {\n-        // Client-side errors\n-        errorMessage = `Error: ${error.error.message}`;\n-      } else {\n-        // Server-side errors\n-        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n-      }\n-      console.log(errorMessage)\n-      throw(errorMessage)\n+  // --------------------------------------- Error handling ---------------------------------------\n+  handleError(error: any) {\n+    let errorMessage = 'Unknown error!';\n+    if (error.error instanceof ErrorEvent) {\n+      // Client-side errors\n+      errorMessage = `Error: ${error.error.message}`;\n+    } else {\n+      // Server-side errors\n+      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n     }\n+    console.log(errorMessage)\n+    throw(errorMessage)\n+  }\n }\n"
                },
                {
                    "date": 1656717204826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,12 @@\n     this.auth.signInAnonymously().then()\n     .catch(error => this.handleError(error));\n   }\n \n+  getUserUid(): string | null {\n+    return this.uid.value\n+  }\n+\n   // --------------------------------------- Error handling ---------------------------------------\n   handleError(error: any) {\n     let errorMessage = 'Unknown error!';\n     if (error.error instanceof ErrorEvent) {\n"
                },
                {
                    "date": 1656717252979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,11 @@\n     private auth: AngularFireAuth,\n     private firestore: AngularFirestore\n   ) { }\n \n+\n+  // --------------------------------------- Authentication ---------------------------------------\n+\n   signIn() {\n     // Update uid on auth change\n     this.auth.onAuthStateChanged(user => this.uid.next(!user ? null : user.uid));\n \n@@ -28,8 +31,11 @@\n   getUserUid(): string | null {\n     return this.uid.value\n   }\n \n+  // --------------------------------------- Firestore ---------------------------------------\n+\n+\n   // --------------------------------------- Error handling ---------------------------------------\n   handleError(error: any) {\n     let errorMessage = 'Unknown error!';\n     if (error.error instanceof ErrorEvent) {\n"
                },
                {
                    "date": 1656717381147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import { Session } from './../models/firestore.model';\n import { Injectable } from '@angular/core';\n import { AngularFirestore, AngularFirestoreCollection } from '@angular/fire/compat/firestore';\n import { AngularFireAuth } from '@angular/fire/compat/auth';\n import { BehaviorSubject } from 'rxjs'\n@@ -33,8 +34,12 @@\n   }\n \n   // --------------------------------------- Firestore ---------------------------------------\n \n+  createSession(session: Session) {\n+    return this.firestore.collection('sessions').add(session)\n+    .catch(error => this.handleError(error))\n+  }\n \n   // --------------------------------------- Error handling ---------------------------------------\n   handleError(error: any) {\n     let errorMessage = 'Unknown error!';\n"
                },
                {
                    "date": 1656717985100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,13 @@\n import { Session } from './../models/firestore.model';\n import { Injectable } from '@angular/core';\n-import { AngularFirestore, AngularFirestoreCollection } from '@angular/fire/compat/firestore';\n+import { AngularFirestore } from '@angular/fire/compat/firestore';\n import { AngularFireAuth } from '@angular/fire/compat/auth';\n import { BehaviorSubject } from 'rxjs'\n-import { User } from \"firebase/auth\";\n \n+import firebase from 'firebase/app';\n+import 'firebase/firestore';\n+\n @Injectable({\n   providedIn: 'root'\n })\n export class FirebaseService {\n@@ -34,8 +36,12 @@\n   }\n \n   // --------------------------------------- Firestore ---------------------------------------\n \n+  getServerTimestamp() {\n+    return firebase.firestore.FieldValue.serverTimestamp();\n+  }\n+\n   createSession(session: Session) {\n     return this.firestore.collection('sessions').add(session)\n     .catch(error => this.handleError(error))\n   }\n"
                },
                {
                    "date": 1656718716414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,11 +3,8 @@\n import { AngularFirestore } from '@angular/fire/compat/firestore';\n import { AngularFireAuth } from '@angular/fire/compat/auth';\n import { BehaviorSubject } from 'rxjs'\n \n-import firebase from 'firebase/app';\n-import 'firebase/firestore';\n-\n @Injectable({\n   providedIn: 'root'\n })\n export class FirebaseService {\n@@ -36,11 +33,8 @@\n   }\n \n   // --------------------------------------- Firestore ---------------------------------------\n \n-  getServerTimestamp() {\n-    return firebase.firestore.FieldValue.serverTimestamp();\n-  }\n \n   createSession(session: Session) {\n     return this.firestore.collection('sessions').add(session)\n     .catch(error => this.handleError(error))\n"
                },
                {
                    "date": 1656718742160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     this.auth.onAuthStateChanged(user => this.uid.next(!user ? null : user.uid));\n \n     // Sign in anonymously\n     this.auth.signInAnonymously().then()\n-    .catch(error => this.handleError(error));\n+      .catch(error => this.handleError(error));\n   }\n \n   getUserUid(): string | null {\n     return this.uid.value\n@@ -35,10 +35,10 @@\n   // --------------------------------------- Firestore ---------------------------------------\n \n \n   createSession(session: Session) {\n-    return this.firestore.collection('sessions').add(session)\n-    .catch(error => this.handleError(error))\n+    return this.firestore.collection('sessions').add({...session})\n+      .catch(error => this.handleError(error))\n   }\n \n   // --------------------------------------- Error handling ---------------------------------------\n   handleError(error: any) {\n@@ -50,7 +50,7 @@\n       // Server-side errors\n       errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n     }\n     console.log(errorMessage)\n-    throw(errorMessage)\n+    throw (errorMessage)\n   }\n }\n"
                },
                {
                    "date": 1656719120086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,10 +34,12 @@\n \n   // --------------------------------------- Firestore ---------------------------------------\n \n \n-  createSession(session: Session) {\n-    return this.firestore.collection('sessions').add({...session})\n+  createSession(session: Session): Promise<string | void> {\n+    const sid = this.firestore.createId();\n+    return this.firestore.collection('sessions').doc(sid).set({ ...session })\n+      .then(() => sid)\n       .catch(error => this.handleError(error))\n   }\n \n   // --------------------------------------- Error handling ---------------------------------------\n"
                },
                {
                    "date": 1656719189319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,9 @@\n \n \n   createSession(session: Session): Promise<string | void> {\n     const sid = this.firestore.createId();\n+    console.log(session);\n     return this.firestore.collection('sessions').doc(sid).set({ ...session })\n       .then(() => sid)\n       .catch(error => this.handleError(error))\n   }\n"
                },
                {
                    "date": 1656719311410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n \n \n   createSession(session: Session): Promise<string | void> {\n     const sid = this.firestore.createId();\n-    console.log(session);\n+    console.log({...session});\n     return this.firestore.collection('sessions').doc(sid).set({ ...session })\n       .then(() => sid)\n       .catch(error => this.handleError(error))\n   }\n"
                },
                {
                    "date": 1656719450832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,11 +34,11 @@\n \n   // --------------------------------------- Firestore ---------------------------------------\n \n \n-  createSession(session: Session): Promise<string | void> {\n+  createSession(): Promise<string | void> {\n     const sid = this.firestore.createId();\n-    console.log({...session});\n+    const session: Session = new Session(this.getUserUid, new Date(), 0);\n     return this.firestore.collection('sessions').doc(sid).set({ ...session })\n       .then(() => sid)\n       .catch(error => this.handleError(error))\n   }\n"
                },
                {
                    "date": 1656719520700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,12 +36,16 @@\n \n \n   createSession(): Promise<string | void> {\n     const sid = this.firestore.createId();\n-    const session: Session = new Session(this.getUserUid, new Date(), 0);\n-    return this.firestore.collection('sessions').doc(sid).set({ ...session })\n-      .then(() => sid)\n-      .catch(error => this.handleError(error))\n+    const uid = this.getUserUid();\n+    if (uid) {\n+      const session: Session = new Session(uid, new Date(), 0);\n+      return this.firestore.collection('sessions').doc(sid).set({ ...session })\n+        .then(() => sid)\n+        .catch(error => this.handleError(error))\n+    }\n+    throw('User not logged in')\n   }\n \n   // --------------------------------------- Error handling ---------------------------------------\n   handleError(error: any) {\n"
                },
                {
                    "date": 1656719551885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     const sid = this.firestore.createId();\n     const uid = this.getUserUid();\n     if (uid) {\n       const session: Session = new Session(uid, new Date(), 0);\n-      return this.firestore.collection('sessions').doc(sid).set({ ...session })\n+      return this.firestore.collection('sessions').doc(sid).set({ test: '420' })\n         .then(() => sid)\n         .catch(error => this.handleError(error))\n     }\n     throw('User not logged in')\n"
                },
                {
                    "date": 1656719627902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,10 @@\n     const sid = this.firestore.createId();\n     const uid = this.getUserUid();\n     if (uid) {\n       const session: Session = new Session(uid, new Date(), 0);\n-      return this.firestore.collection('sessions').doc(sid).set({ test: '420' })\n+      console.log(session);\n+      return this.firestore.collection('sessions').doc(sid).set({ ...session })\n         .then(() => sid)\n         .catch(error => this.handleError(error))\n     }\n     throw('User not logged in')\n"
                },
                {
                    "date": 1656719691262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,8 @@\n     const sid = this.firestore.createId();\n     const uid = this.getUserUid();\n     if (uid) {\n       const session: Session = new Session(uid, new Date(), 0);\n-      console.log(session);\n       return this.firestore.collection('sessions').doc(sid).set({ ...session })\n         .then(() => sid)\n         .catch(error => this.handleError(error))\n     }\n"
                },
                {
                    "date": 1656719878198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,16 +34,19 @@\n \n   // --------------------------------------- Firestore ---------------------------------------\n \n \n-  createSession(): Promise<string | void> {\n+  async createSession(): Promise<string | void> {\n     const sid = this.firestore.createId();\n     const uid = this.getUserUid();\n     if (uid) {\n       const session: Session = new Session(uid, new Date(), 0);\n-      return this.firestore.collection('sessions').doc(sid).set({ ...session })\n-        .then(() => sid)\n-        .catch(error => this.handleError(error))\n+      try {\n+        await this.firestore.collection('sessions').doc(sid).set({ ...session });\n+        return sid;\n+      } catch (error) {\n+        return this.handleError(error);\n+      }\n     }\n     throw('User not logged in')\n   }\n \n"
                },
                {
                    "date": 1656721645416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import { SharedService } from './shared.service';\n import { Session } from './../models/firestore.model';\n import { Injectable } from '@angular/core';\n import { AngularFirestore } from '@angular/fire/compat/firestore';\n import { AngularFireAuth } from '@angular/fire/compat/auth';\n@@ -11,8 +12,9 @@\n \n   private uid: BehaviorSubject<string | null> = new BehaviorSubject<string | null>(null);\n \n   constructor(\n+    private sharedService: SharedService,\n     private auth: AngularFireAuth,\n     private firestore: AngularFirestore\n   ) { }\n \n@@ -35,8 +37,9 @@\n   // --------------------------------------- Firestore ---------------------------------------\n \n \n   async createSession(): Promise<string | void> {\n+    this.sharedService.startProgress();\n     const sid = this.firestore.createId();\n     const uid = this.getUserUid();\n     if (uid) {\n       const session: Session = new Session(uid, new Date(), 0);\n@@ -44,11 +47,13 @@\n         await this.firestore.collection('sessions').doc(sid).set({ ...session });\n         return sid;\n       } catch (error) {\n         return this.handleError(error);\n+      } finally {\n+        this.sharedService.endProgress();\n       }\n     }\n-    throw('User not logged in')\n+    throw('User not logged in');\n   }\n \n   // --------------------------------------- Error handling ---------------------------------------\n   handleError(error: any) {\n"
                },
                {
                    "date": 1656721655926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,13 +37,13 @@\n   // --------------------------------------- Firestore ---------------------------------------\n \n \n   async createSession(): Promise<string | void> {\n-    this.sharedService.startProgress();\n     const sid = this.firestore.createId();\n     const uid = this.getUserUid();\n     if (uid) {\n       const session: Session = new Session(uid, new Date(), 0);\n+      this.sharedService.startProgress();\n       try {\n         await this.firestore.collection('sessions').doc(sid).set({ ...session });\n         return sid;\n       } catch (error) {\n"
                },
                {
                    "date": 1656723264278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,12 @@\n   // --------------------------------------- Authentication ---------------------------------------\n \n   signIn() {\n     // Update uid on auth change\n-    this.auth.onAuthStateChanged(user => this.uid.next(!user ? null : user.uid));\n+    this.auth.onAuthStateChanged(user => {\n+      console.log(user?.displayName);\n+      this.uid.next(!user ? null : user.uid)\n+    });\n \n     // Sign in anonymously\n     this.auth.signInAnonymously().then()\n       .catch(error => this.handleError(error));\n"
                },
                {
                    "date": 1656723280933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \n   signIn() {\n     // Update uid on auth change\n     this.auth.onAuthStateChanged(user => {\n-      console.log(user?.displayName);\n+      console.log(user?.photoURL);\n       this.uid.next(!user ? null : user.uid)\n     });\n \n     // Sign in anonymously\n"
                },
                {
                    "date": 1656723729073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n })\n export class FirebaseService {\n \n   private uid: BehaviorSubject<string | null> = new BehaviorSubject<string | null>(null);\n+  private username: BehaviorSubject<string | null> = new BehaviorSubject<string | null>(null);\n \n   constructor(\n     private sharedService: SharedService,\n     private auth: AngularFireAuth,\n@@ -23,10 +24,10 @@\n \n   signIn() {\n     // Update uid on auth change\n     this.auth.onAuthStateChanged(user => {\n-      console.log(user?.photoURL);\n       this.uid.next(!user ? null : user.uid)\n+      this.username.next(!user ? null : user.displayName)\n     });\n \n     // Sign in anonymously\n     this.auth.signInAnonymously().then()\n"
                },
                {
                    "date": 1656723847422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,12 @@\n   getUserUid(): string | null {\n     return this.uid.value\n   }\n \n+  getUserUsername(): string | null {\n+    return this.username.value\n+  }\n+\n   // --------------------------------------- Firestore ---------------------------------------\n \n \n   async createSession(): Promise<string | void> {\n"
                },
                {
                    "date": 1656724022206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { Session } from './../models/firestore.model';\n import { Injectable } from '@angular/core';\n import { AngularFirestore } from '@angular/fire/compat/firestore';\n import { AngularFireAuth } from '@angular/fire/compat/auth';\n-import { BehaviorSubject } from 'rxjs'\n+import { BehaviorSubject, Observable } from 'rxjs'\n \n @Injectable({\n   providedIn: 'root'\n })\n@@ -62,8 +62,12 @@\n     }\n     throw('User not logged in');\n   }\n \n+  getSession(sid: string): Observable<Session | undefined> {\n+    return this.firestore.collection('sessions').doc<Session>(sid).valueChanges()\n+  }\n+\n   // --------------------------------------- Error handling ---------------------------------------\n   handleError(error: any) {\n     let errorMessage = 'Unknown error!';\n     if (error.error instanceof ErrorEvent) {\n"
                },
                {
                    "date": 1656724997464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,15 +59,55 @@\n       } finally {\n         this.sharedService.endProgress();\n       }\n     }\n-    throw('User not logged in');\n+    throw ('User not logged in');\n   }\n \n   getSession(sid: string): Observable<Session | undefined> {\n     return this.firestore.collection('sessions').doc<Session>(sid).valueChanges()\n   }\n \n+  addUserToSession(sid: string) {\n+    const uid = this.getUserUid();\n+    if (!uid) return \n+\n+    const sessionDocRef = this.firestore.collection('sessions').doc(sid);\n+    const userDocRef = sessionDocRef.collection('users').doc(uid);\n+\n+    const transaction = this.firestore.firestore.runTransaction(async (transaction) => {\n+      let unum = 0;\n+\n+      return Promise.all([transaction.get(sessionDocRef), transaction.get(userDocRef)]).then((response) => {\n+      });\n+\n+      const sessionDoc = await;\n+\n+      if (!sessionDoc.exists()) {\n+        throw \"Document does not exist!\";\n+      }\n+\n+      const userDoc = await ;\n+\n+      if (!userDoc.exists()) {\n+        unum = sessionDoc.data().participants + 1;\n+        transaction.update(sessionDocRef, {\n+          participants: unum,\n+          processed: false,\n+        });\n+        transaction.set(userDocRef, {\n+          userNumber: unum,\n+          sessionJoinTimestamp: serverTimestamp(),\n+        });\n+      } else {\n+        unum = userDoc.data().userNumber;\n+      }\n+\n+      const isHost = uid === sessionDoc.data().host;\n+      return [isHost, unum];\n+    });\n+  }\n+\n   // --------------------------------------- Error handling ---------------------------------------\n   handleError(error: any) {\n     let errorMessage = 'Unknown error!';\n     if (error.error instanceof ErrorEvent) {\n"
                },
                {
                    "date": 1656726120151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,41 +70,36 @@\n   addUserToSession(sid: string) {\n     const uid = this.getUserUid();\n     if (!uid) return \n \n-    const sessionDocRef = this.firestore.collection('sessions').doc(sid);\n+    const sessionDocRef = this.firestore.firestore.collection('sessions').doc(sid);\n     const userDocRef = sessionDocRef.collection('users').doc(uid);\n \n     const transaction = this.firestore.firestore.runTransaction(async (transaction) => {\n       let unum = 0;\n \n       return Promise.all([transaction.get(sessionDocRef), transaction.get(userDocRef)]).then((response) => {\n-      });\n+        const [sessionDoc, userDoc] = response;\n+        \n+        if (!sessionDoc.exists) throw \"Document does not exist!\";\n \n-      const sessionDoc = await;\n+        if (!userDoc.exists) {\n+          unum = sessionDoc.data()?['participants'] + 1;\n+          transaction.update(sessionDocRef, {\n+            participants: unum,\n+            processed: false,\n+          });\n+          transaction.set(userDocRef, {\n+            userNumber: unum,\n+            sessionJoinTimestamp: new Date(),\n+          });\n+        } else {\n+          unum = userDoc.data()?['userNumber'];\n+        }\n \n-      if (!sessionDoc.exists()) {\n-        throw \"Document does not exist!\";\n-      }\n-\n-      const userDoc = await ;\n-\n-      if (!userDoc.exists()) {\n-        unum = sessionDoc.data().participants + 1;\n-        transaction.update(sessionDocRef, {\n-          participants: unum,\n-          processed: false,\n-        });\n-        transaction.set(userDocRef, {\n-          userNumber: unum,\n-          sessionJoinTimestamp: serverTimestamp(),\n-        });\n-      } else {\n-        unum = userDoc.data().userNumber;\n-      }\n-\n-      const isHost = uid === sessionDoc.data().host;\n-      return [isHost, unum];\n+        const isHost = uid === sessionDoc.data()?['host'];\n+        return [isHost, unum];\n+      });      \n     });\n   }\n \n   // --------------------------------------- Error handling ---------------------------------------\n"
                },
                {
                    "date": 1656726191562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n         \n         if (!sessionDoc.exists) throw \"Document does not exist!\";\n \n         if (!userDoc.exists) {\n-          unum = sessionDoc.data()?['participants'] + 1;\n+          unum = sessionDoc.data()?.['participants'] + 1;\n           transaction.update(sessionDocRef, {\n             participants: unum,\n             processed: false,\n           });\n@@ -92,12 +92,12 @@\n             userNumber: unum,\n             sessionJoinTimestamp: new Date(),\n           });\n         } else {\n-          unum = userDoc.data()?['userNumber'];\n+          unum = userDoc.data()?.['userNumber'];\n         }\n \n-        const isHost = uid === sessionDoc.data()?['host'];\n+        const isHost = uid === sessionDoc.data()?.['host'];\n         return [isHost, unum];\n       });      \n     });\n   }\n"
                },
                {
                    "date": 1656726292866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,11 +96,17 @@\n           unum = userDoc.data()?.['userNumber'];\n         }\n \n         const isHost = uid === sessionDoc.data()?.['host'];\n-        return [isHost, unum];\n+        return [isHost, unum, sessionDoc.data()];\n       });      \n     });\n+\n+    return transaction.catch((e) => {\n+      if (e.message === 'Connection failed.') throw(\"Please check your internet connection and try again.\"); //Failed internet connection\n+      if (e.name)  throw(\"An error occurred while processing your request. Please try again later!\"); //Other error and exceptions\n+      throw(e); //Custom error\n+    })\n   }\n \n   // --------------------------------------- Error handling ---------------------------------------\n   handleError(error: any) {\n"
                },
                {
                    "date": 1656726570395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { SharedService } from './shared.service';\n import { Session } from './../models/firestore.model';\n import { Injectable } from '@angular/core';\n-import { AngularFirestore } from '@angular/fire/compat/firestore';\n+import { AngularFirestore, DocumentData } from '@angular/fire/compat/firestore';\n import { AngularFireAuth } from '@angular/fire/compat/auth';\n import { BehaviorSubject, Observable } from 'rxjs'\n \n @Injectable({\n@@ -66,47 +66,49 @@\n   getSession(sid: string): Observable<Session | undefined> {\n     return this.firestore.collection('sessions').doc<Session>(sid).valueChanges()\n   }\n \n-  addUserToSession(sid: string) {\n+  addUserToSession(sid: string): Promise<(number | boolean | DocumentData | undefined)[]>  | undefined {\n     const uid = this.getUserUid();\n-    if (!uid) return \n+    if (uid) {\n \n-    const sessionDocRef = this.firestore.firestore.collection('sessions').doc(sid);\n-    const userDocRef = sessionDocRef.collection('users').doc(uid);\n+      const sessionDocRef = this.firestore.firestore.collection('sessions').doc(sid);\n+      const userDocRef = sessionDocRef.collection('users').doc(uid);\n \n-    const transaction = this.firestore.firestore.runTransaction(async (transaction) => {\n-      let unum = 0;\n+      const transaction = this.firestore.firestore.runTransaction(async (transaction) => {\n+        let unum = 0;\n \n-      return Promise.all([transaction.get(sessionDocRef), transaction.get(userDocRef)]).then((response) => {\n-        const [sessionDoc, userDoc] = response;\n-        \n-        if (!sessionDoc.exists) throw \"Document does not exist!\";\n+        return Promise.all([transaction.get(sessionDocRef), transaction.get(userDocRef)]).then((response) => {\n+          const [sessionDoc, userDoc] = response;\n \n-        if (!userDoc.exists) {\n-          unum = sessionDoc.data()?.['participants'] + 1;\n-          transaction.update(sessionDocRef, {\n-            participants: unum,\n-            processed: false,\n-          });\n-          transaction.set(userDocRef, {\n-            userNumber: unum,\n-            sessionJoinTimestamp: new Date(),\n-          });\n-        } else {\n-          unum = userDoc.data()?.['userNumber'];\n-        }\n+          if (!sessionDoc.exists) throw \"Document does not exist!\";\n \n-        const isHost = uid === sessionDoc.data()?.['host'];\n-        return [isHost, unum, sessionDoc.data()];\n-      });      \n-    });\n+          if (!userDoc.exists) {\n+            unum = sessionDoc.data()?.['participants'] + 1;\n+            transaction.update(sessionDocRef, {\n+              participants: unum,\n+              processed: false,\n+            });\n+            transaction.set(userDocRef, {\n+              userNumber: unum,\n+              sessionJoinTimestamp: new Date(),\n+            });\n+          } else {\n+            unum = userDoc.data()?.['userNumber'];\n+          }\n \n-    return transaction.catch((e) => {\n-      if (e.message === 'Connection failed.') throw(\"Please check your internet connection and try again.\"); //Failed internet connection\n-      if (e.name)  throw(\"An error occurred while processing your request. Please try again later!\"); //Other error and exceptions\n-      throw(e); //Custom error\n-    })\n+          const isHost = uid === sessionDoc.data()?.['host'];\n+          return [isHost, unum, sessionDoc.data()];\n+        });\n+      });\n+\n+      return transaction.catch((e) => {\n+        if (e.message === 'Connection failed.') throw (\"Please check your internet connection and try again.\"); //Failed internet connection\n+        if (e.name) throw (\"An error occurred while processing your request. Please try again later!\"); //Other error and exceptions\n+        throw (e); //Custom error\n+      })\n+    }\n+    return undefined\n   }\n \n   // --------------------------------------- Error handling ---------------------------------------\n   handleError(error: any) {\n"
                },
                {
                    "date": 1656726760126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n   getSession(sid: string): Observable<Session | undefined> {\n     return this.firestore.collection('sessions').doc<Session>(sid).valueChanges()\n   }\n \n-  addUserToSession(sid: string): Promise<(number | boolean | DocumentData | undefined)[]>  | undefined {\n+  addUserToSession(sid: string): Promise<any>  | undefined {\n     const uid = this.getUserUid();\n     if (uid) {\n \n       const sessionDocRef = this.firestore.firestore.collection('sessions').doc(sid);\n@@ -96,9 +96,9 @@\n             unum = userDoc.data()?.['userNumber'];\n           }\n \n           const isHost = uid === sessionDoc.data()?.['host'];\n-          return [isHost, unum, sessionDoc.data()];\n+          return {isHost: isHost, unum: unum, session: sessionDoc.data()};\n         });\n       });\n \n       return transaction.catch((e) => {\n"
                },
                {
                    "date": 1656726868420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n               processed: false,\n             });\n             transaction.set(userDocRef, {\n               userNumber: unum,\n-              sessionJoinTimestamp: new Date(),\n+              sessionStartTimestamp: new Date(),\n             });\n           } else {\n             unum = userDoc.data()?.['userNumber'];\n           }\n"
                },
                {
                    "date": 1656726904354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n           } else {\n             unum = userDoc.data()?.['userNumber'];\n           }\n \n-          const isHost = uid === sessionDoc.data()?.['host'];\n+          const isHost = uid === sessionDoc.data()?.['host_uid'];\n           return {isHost: isHost, unum: unum, session: sessionDoc.data()};\n         });\n       });\n \n"
                },
                {
                    "date": 1656738991987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n })\n export class FirebaseService {\n \n   private uid: BehaviorSubject<string | null> = new BehaviorSubject<string | null>(null);\n-  private username: BehaviorSubject<string | null> = new BehaviorSubject<string | null>(null);\n \n   constructor(\n     private sharedService: SharedService,\n     private auth: AngularFireAuth,\n@@ -25,9 +24,8 @@\n   signIn() {\n     // Update uid on auth change\n     this.auth.onAuthStateChanged(user => {\n       this.uid.next(!user ? null : user.uid)\n-      this.username.next(!user ? null : user.displayName)\n     });\n \n     // Sign in anonymously\n     this.auth.signInAnonymously().then()\n@@ -37,12 +35,8 @@\n   getUserUid(): string | null {\n     return this.uid.value\n   }\n \n-  getUserUsername(): string | null {\n-    return this.username.value\n-  }\n-\n   // --------------------------------------- Firestore ---------------------------------------\n \n \n   async createSession(): Promise<string | void> {\n@@ -109,8 +103,16 @@\n     }\n     return undefined\n   }\n \n+  addNewUser() {\n+    \n+  }\n+\n+  getUserInformation(): string | null {\n+    return ''\n+  }\n+\n   // --------------------------------------- Error handling ---------------------------------------\n   handleError(error: any) {\n     let errorMessage = 'Unknown error!';\n     if (error.error instanceof ErrorEvent) {\n"
                },
                {
                    "date": 1656739225056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import { User } from 'firebase/auth';\n import { SharedService } from './shared.service';\n import { Session } from './../models/firestore.model';\n import { Injectable } from '@angular/core';\n import { AngularFirestore, DocumentData } from '@angular/fire/compat/firestore';\n@@ -60,9 +61,9 @@\n   getSession(sid: string): Observable<Session | undefined> {\n     return this.firestore.collection('sessions').doc<Session>(sid).valueChanges()\n   }\n \n-  addUserToSession(sid: string): Promise<any>  | undefined {\n+  addUserToSession(sid: string): Promise<any> | undefined {\n     const uid = this.getUserUid();\n     if (uid) {\n \n       const sessionDocRef = this.firestore.firestore.collection('sessions').doc(sid);\n@@ -90,9 +91,9 @@\n             unum = userDoc.data()?.['userNumber'];\n           }\n \n           const isHost = uid === sessionDoc.data()?.['host_uid'];\n-          return {isHost: isHost, unum: unum, session: sessionDoc.data()};\n+          return { isHost: isHost, unum: unum, session: sessionDoc.data() };\n         });\n       });\n \n       return transaction.catch((e) => {\n@@ -103,10 +104,12 @@\n     }\n     return undefined\n   }\n \n-  addNewUser() {\n-    \n+  updateUser(user: User) {\n+    const uid = this.getUserUid();\n+    if (!uid) return;\n+    this.firestore.collection('users').doc(uid).update({ ...user });\n   }\n \n   getUserInformation(): string | null {\n     return ''\n"
                },
                {
                    "date": 1656739377653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,10 +110,10 @@\n     if (!uid) return;\n     this.firestore.collection('users').doc(uid).update({ ...user });\n   }\n \n-  getUserInformation(): string | null {\n-    return ''\n+  getUserInformation(uid: string): Observable<unknown> {\n+    return this.firestore.collection('users').doc(uid).valueChanges();\n   }\n \n   // --------------------------------------- Error handling ---------------------------------------\n   handleError(error: any) {\n"
                },
                {
                    "date": 1656739498535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,8 +110,14 @@\n     if (!uid) return;\n     this.firestore.collection('users').doc(uid).update({ ...user });\n   }\n \n+  getMyInformation(): Observable<unknown> | null {\n+    const uid = this.getUserUid();\n+    if (!uid) return null\n+    return this.firestore.collection('users').doc(uid).valueChanges();\n+  }\n+\n   getUserInformation(uid: string): Observable<unknown> {\n     return this.firestore.collection('users').doc(uid).valueChanges();\n   }\n \n"
                },
                {
                    "date": 1656739559866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,16 +110,16 @@\n     if (!uid) return;\n     this.firestore.collection('users').doc(uid).update({ ...user });\n   }\n \n-  getMyInformation(): Observable<unknown> | null {\n+  getMyInformation(): Observable<User | undefined> | null {\n     const uid = this.getUserUid();\n     if (!uid) return null\n-    return this.firestore.collection('users').doc(uid).valueChanges();\n+    return this.firestore.collection('users').doc<User>(uid).valueChanges();\n   }\n \n-  getUserInformation(uid: string): Observable<unknown> {\n-    return this.firestore.collection('users').doc(uid).valueChanges();\n+  getUserInformation(uid: string): Observable<User | undefined> {\n+    return this.firestore.collection('users').doc<User>(uid).valueChanges();\n   }\n \n   // --------------------------------------- Error handling ---------------------------------------\n   handleError(error: any) {\n"
                },
                {
                    "date": 1656740141998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n-import { User } from 'firebase/auth';\n import { SharedService } from './shared.service';\n-import { Session } from './../models/firestore.model';\n+import { Session, User } from './../models/firestore.model';\n import { Injectable } from '@angular/core';\n import { AngularFirestore, DocumentData } from '@angular/fire/compat/firestore';\n import { AngularFireAuth } from '@angular/fire/compat/auth';\n import { BehaviorSubject, Observable } from 'rxjs'\n"
                },
                {
                    "date": 1656740576215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,13 +23,19 @@\n \n   signIn() {\n     // Update uid on auth change\n     this.auth.onAuthStateChanged(user => {\n-      this.uid.next(!user ? null : user.uid)\n+      this.uid.next(!user ? null : user.uid);\n     });\n \n     // Sign in anonymously\n-    this.auth.signInAnonymously().then()\n+    this.auth.signInAnonymously()\n+      .then((user) => {\n+        if (user.user) {\n+          const newUser: User = new User(user.user.uid, '');\n+          user.additionalUserInfo?.isNewUser ? this.updateUser(newUser) : null;\n+        }\n+      })\n       .catch(error => this.handleError(error));\n   }\n \n   getUserUid(): string | null {\n"
                },
                {
                    "date": 1656740849074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,10 +30,9 @@\n     // Sign in anonymously\n     this.auth.signInAnonymously()\n       .then((user) => {\n         if (user.user) {\n-          const newUser: User = new User(user.user.uid, '');\n-          user.additionalUserInfo?.isNewUser ? this.updateUser(newUser) : null;\n+          user.additionalUserInfo?.isNewUser ? this.addUser() : null;\n         }\n       })\n       .catch(error => this.handleError(error));\n   }\n@@ -109,8 +108,15 @@\n     }\n     return undefined\n   }\n \n+  addUser() {\n+    const uid = this.getUserUid();\n+    if (!uid) return;\n+    const user: User = new User(uid, '');\n+    this.firestore.collection('users').doc(uid).set({ ...user });\n+  }\n+\n   updateUser(user: User) {\n     const uid = this.getUserUid();\n     if (!uid) return;\n     this.firestore.collection('users').doc(uid).update({ ...user });\n"
                },
                {
                    "date": 1656740895400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,13 +28,9 @@\n     });\n \n     // Sign in anonymously\n     this.auth.signInAnonymously()\n-      .then((user) => {\n-        if (user.user) {\n-          user.additionalUserInfo?.isNewUser ? this.addUser() : null;\n-        }\n-      })\n+      .then(user => user.additionalUserInfo?.isNewUser ? this.addUser() : null)\n       .catch(error => this.handleError(error));\n   }\n \n   getUserUid(): string | null {\n"
                },
                {
                    "date": 1656751970426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,11 +111,12 @@\n     const user: User = new User(uid, '');\n     this.firestore.collection('users').doc(uid).set({ ...user });\n   }\n \n-  updateUser(user: User) {\n+  updateUsername(username: string) {\n     const uid = this.getUserUid();\n     if (!uid) return;\n+    const user = new User(uid, username);\n     this.firestore.collection('users').doc(uid).update({ ...user });\n   }\n \n   getMyInformation(): Observable<User | undefined> | null {\n"
                },
                {
                    "date": 1656752469639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,16 +2,17 @@\n import { Session, User } from './../models/firestore.model';\n import { Injectable } from '@angular/core';\n import { AngularFirestore, DocumentData } from '@angular/fire/compat/firestore';\n import { AngularFireAuth } from '@angular/fire/compat/auth';\n-import { BehaviorSubject, Observable } from 'rxjs'\n+import { BehaviorSubject, Observable, take } from 'rxjs'\n \n @Injectable({\n   providedIn: 'root'\n })\n export class FirebaseService {\n \n   private uid: BehaviorSubject<string | null> = new BehaviorSubject<string | null>(null);\n+  private username: string | undefined;\n \n   constructor(\n     private sharedService: SharedService,\n     private auth: AngularFireAuth,\n@@ -104,8 +105,19 @@\n     }\n     return undefined\n   }\n \n+  userBootstrap() {\n+    this.setUsername();\n+    this.addUser();\n+  }\n+\n+  setUsername() {\n+    const uid = this.getUserUid();\n+    if (!uid) return;\n+    this.getMyInformation()?.pipe(take(1)).subscribe((user) => this.username = user?.username);\n+  }\n+\n   addUser() {\n     const uid = this.getUserUid();\n     if (!uid) return;\n     const user: User = new User(uid, '');\n"
                },
                {
                    "date": 1656752510970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     });\n \n     // Sign in anonymously\n     this.auth.signInAnonymously()\n-      .then(user => user.additionalUserInfo?.isNewUser ? this.addUser() : null)\n+      .then(user => user.additionalUserInfo?.isNewUser ? this.userBootstrap() : this.setUsername())\n       .catch(error => this.handleError(error));\n   }\n \n   getUserUid(): string | null {\n@@ -106,23 +106,23 @@\n     return undefined\n   }\n \n   userBootstrap() {\n+    this.addUser();\n     this.setUsername();\n-    this.addUser();\n   }\n \n-  setUsername() {\n+  addUser() {\n     const uid = this.getUserUid();\n     if (!uid) return;\n-    this.getMyInformation()?.pipe(take(1)).subscribe((user) => this.username = user?.username);\n+    const user: User = new User(uid, '');\n+    this.firestore.collection('users').doc(uid).set({ ...user });\n   }\n \n-  addUser() {\n+  setUsername() {\n     const uid = this.getUserUid();\n     if (!uid) return;\n-    const user: User = new User(uid, '');\n-    this.firestore.collection('users').doc(uid).set({ ...user });\n+    this.getMyInformation()?.pipe(take(1)).subscribe((user) => this.username = user?.username);\n   }\n \n   updateUsername(username: string) {\n     const uid = this.getUserUid();\n"
                },
                {
                    "date": 1656752627494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     });\n \n     // Sign in anonymously\n     this.auth.signInAnonymously()\n-      .then(user => user.additionalUserInfo?.isNewUser ? this.userBootstrap() : this.setUsername())\n+      .then(user => user.additionalUserInfo?.isNewUser ? this.userBootstrap() : this.storeUsername())\n       .catch(error => this.handleError(error));\n   }\n \n   getUserUid(): string | null {\n@@ -106,30 +106,32 @@\n     return undefined\n   }\n \n   userBootstrap() {\n-    this.addUser();\n-    this.setUsername();\n+    this.addUser()?.then(() => this.storeUsername());\n   }\n \n   addUser() {\n     const uid = this.getUserUid();\n     if (!uid) return;\n     const user: User = new User(uid, '');\n-    this.firestore.collection('users').doc(uid).set({ ...user });\n+    return this.firestore.collection('users').doc(uid).set({ ...user });\n   }\n \n-  setUsername() {\n+  storeUsername() {\n     const uid = this.getUserUid();\n     if (!uid) return;\n     this.getMyInformation()?.pipe(take(1)).subscribe((user) => this.username = user?.username);\n   }\n \n   updateUsername(username: string) {\n+    if (username === this.username) return;\n     const uid = this.getUserUid();\n     if (!uid) return;\n     const user = new User(uid, username);\n-    this.firestore.collection('users').doc(uid).update({ ...user });\n+    this.firestore.collection('users').doc(uid)\n+      .update({ ...user })\n+      .then(() => this.username = username);\n   }\n \n   getMyInformation(): Observable<User | undefined> | null {\n     const uid = this.getUserUid();\n"
                },
                {
                    "date": 1656752668280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,19 +119,17 @@\n \n   storeUsername() {\n     const uid = this.getUserUid();\n     if (!uid) return;\n-    this.getMyInformation()?.pipe(take(1)).subscribe((user) => this.username = user?.username);\n+    this.getMyInformation()?.subscribe((user) => this.username = user?.username);\n   }\n \n   updateUsername(username: string) {\n     if (username === this.username) return;\n     const uid = this.getUserUid();\n     if (!uid) return;\n     const user = new User(uid, username);\n-    this.firestore.collection('users').doc(uid)\n-      .update({ ...user })\n-      .then(() => this.username = username);\n+    this.firestore.collection('users').doc(uid).update({ ...user });\n   }\n \n   getMyInformation(): Observable<User | undefined> | null {\n     const uid = this.getUserUid();\n"
                },
                {
                    "date": 1656807178104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,12 @@\n       .then(user => user.additionalUserInfo?.isNewUser ? this.userBootstrap() : this.storeUsername())\n       .catch(error => this.handleError(error));\n   }\n \n+  isSignedIn() {\n+    return this.uid;\n+  }\n+\n   getUserUid(): string | null {\n     return this.uid.value\n   }\n \n"
                },
                {
                    "date": 1656807309811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,14 +134,8 @@\n     const user = new User(uid, username);\n     this.firestore.collection('users').doc(uid).update({ ...user });\n   }\n \n-  getMyInformation(): Observable<User | undefined> | null {\n-    const uid = this.getUserUid();\n-    if (!uid) return null\n-    return this.firestore.collection('users').doc<User>(uid).valueChanges();\n-  }\n-\n   getUserInformation(uid: string): Observable<User | undefined> {\n     return this.firestore.collection('users').doc<User>(uid).valueChanges();\n   }\n \n"
                },
                {
                    "date": 1656807322528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n \n   storeUsername() {\n     const uid = this.getUserUid();\n     if (!uid) return;\n-    this.getMyInformation()?.subscribe((user) => this.username = user?.username);\n+    this.getUserInformation(uid)?.subscribe((user) => this.username = user?.username);\n   }\n \n   updateUsername(username: string) {\n     if (username === this.username) return;\n"
                },
                {
                    "date": 1656810668230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { SharedService } from './shared.service';\n-import { Session, User } from './../models/firestore.model';\n+import { Participants, Session, User } from './../models/firestore.model';\n import { Injectable } from '@angular/core';\n import { AngularFirestore, DocumentData } from '@angular/fire/compat/firestore';\n import { AngularFireAuth } from '@angular/fire/compat/auth';\n import { BehaviorSubject, Observable, take } from 'rxjs'\n@@ -66,8 +66,13 @@\n   getSession(sid: string): Observable<Session | undefined> {\n     return this.firestore.collection('sessions').doc<Session>(sid).valueChanges()\n   }\n \n+  getParticipants(sid: string): Observable<Participants[]>  {\n+    return this.firestore.collection('sessions').doc(sid).collection<Participants>('participants').valueChanges()\n+  }\n+  \n+\n   addUserToSession(sid: string): Promise<any> | undefined {\n     const uid = this.getUserUid();\n     if (uid) {\n \n"
                },
                {
                    "date": 1656811024068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { SharedService } from './shared.service';\n-import { Participants, Session, User } from './../models/firestore.model';\n+import { Participant, Session, User } from './../models/firestore.model';\n import { Injectable } from '@angular/core';\n import { AngularFirestore, DocumentData } from '@angular/fire/compat/firestore';\n import { AngularFireAuth } from '@angular/fire/compat/auth';\n import { BehaviorSubject, Observable, take } from 'rxjs'\n@@ -66,10 +66,10 @@\n   getSession(sid: string): Observable<Session | undefined> {\n     return this.firestore.collection('sessions').doc<Session>(sid).valueChanges()\n   }\n \n-  getParticipants(sid: string): Observable<Participants[]>  {\n-    return this.firestore.collection('sessions').doc(sid).collection<Participants>('participants').valueChanges()\n+  getParticipants(sid: string): Observable<Participant[]>  {\n+    return this.firestore.collection('sessions').doc(sid).collection<Participant>('participants').valueChanges()\n   }\n   \n \n   addUserToSession(sid: string): Promise<any> | undefined {\n@@ -92,8 +92,9 @@\n             transaction.update(sessionDocRef, {\n               participants: unum,\n               processed: false,\n             });\n+            // participants: Participants = new Participants();\n             transaction.set(userDocRef, {\n               userNumber: unum,\n               sessionStartTimestamp: new Date(),\n             });\n"
                },
                {
                    "date": 1656811100559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n             transaction.update(sessionDocRef, {\n               participants: unum,\n               processed: false,\n             });\n-            // participants: Participants = new Participants();\n+            const participants: Participant = new Participant(sid, unum, new Date());\n             transaction.set(userDocRef, {\n               userNumber: unum,\n               sessionStartTimestamp: new Date(),\n             });\n"
                },
                {
                    "date": 1656811122793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,13 +92,10 @@\n             transaction.update(sessionDocRef, {\n               participants: unum,\n               processed: false,\n             });\n-            const participants: Participant = new Participant(sid, unum, new Date());\n-            transaction.set(userDocRef, {\n-              userNumber: unum,\n-              sessionStartTimestamp: new Date(),\n-            });\n+            const participant: Participant = new Participant(sid, unum, new Date());\n+            transaction.set(userDocRef, { ...participant });\n           } else {\n             unum = userDoc.data()?.['userNumber'];\n           }\n \n"
                },
                {
                    "date": 1656811203679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n             transaction.update(sessionDocRef, {\n               participants: unum,\n               processed: false,\n             });\n-            const participant: Participant = new Participant(sid, unum, new Date());\n+            const participant: Participant = new Participant(uid, sid, unum, new Date());\n             transaction.set(userDocRef, { ...participant });\n           } else {\n             unum = userDoc.data()?.['userNumber'];\n           }\n"
                },
                {
                    "date": 1656811392217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n     const uid = this.getUserUid();\n     if (uid) {\n \n       const sessionDocRef = this.firestore.firestore.collection('sessions').doc(sid);\n-      const userDocRef = sessionDocRef.collection('users').doc(uid);\n+      const userDocRef = sessionDocRef.collection('participants').doc(uid);\n \n       const transaction = this.firestore.firestore.runTransaction(async (transaction) => {\n         let unum = 0;\n \n"
                },
                {
                    "date": 1656881940823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,10 +98,10 @@\n           } else {\n             unum = userDoc.data()?.['userNumber'];\n           }\n \n-          const isHost = uid === sessionDoc.data()?.['host_uid'];\n-          return { isHost: isHost, unum: unum, session: sessionDoc.data() };\n+          const host_uid = sessionDoc.data()?.['host_uid'];\n+          return { host_uid: host_uid, unum: unum, session: sessionDoc.data() };\n         });\n       });\n \n       return transaction.catch((e) => {\n"
                },
                {
                    "date": 1656882858301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,11 +97,9 @@\n             transaction.set(userDocRef, { ...participant });\n           } else {\n             unum = userDoc.data()?.['userNumber'];\n           }\n-\n-          const host_uid = sessionDoc.data()?.['host_uid'];\n-          return { host_uid: host_uid, unum: unum, session: sessionDoc.data() };\n+          return { unum: unum, session: sessionDoc.data() };\n         });\n       });\n \n       return transaction.catch((e) => {\n"
                },
                {
                    "date": 1656883310551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n             transaction.set(userDocRef, { ...participant });\n           } else {\n             unum = userDoc.data()?.['userNumber'];\n           }\n-          return { unum: unum, session: sessionDoc.data() };\n+          return { unum: unum };\n         });\n       });\n \n       return transaction.catch((e) => {\n"
                },
                {
                    "date": 1656885765694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { Participant, Session, User } from './../models/firestore.model';\n import { Injectable } from '@angular/core';\n import { AngularFirestore, DocumentData } from '@angular/fire/compat/firestore';\n import { AngularFireAuth } from '@angular/fire/compat/auth';\n-import { BehaviorSubject, Observable, take } from 'rxjs'\n+import { BehaviorSubject, map, Observable, take } from 'rxjs'\n \n @Injectable({\n   providedIn: 'root'\n })\n@@ -68,8 +68,10 @@\n   }\n \n   getParticipants(sid: string): Observable<Participant[]>  {\n     return this.firestore.collection('sessions').doc(sid).collection<Participant>('participants').valueChanges()\n+    .pipe(map(participants => participants.sort((a, b) => a.sessionStartTimestamp.getTime() - b.sessionStartTimestamp)))\n+    .pipe(map(participants => participants.sort((a, b) => a.sessionStartTimestamp.getTime() - b.sessionStartTimestamp)))\n   }\n   \n \n   addUserToSession(sid: string): Promise<any> | undefined {\n"
                },
                {
                    "date": 1656885853811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,10 +68,9 @@\n   }\n \n   getParticipants(sid: string): Observable<Participant[]>  {\n     return this.firestore.collection('sessions').doc(sid).collection<Participant>('participants').valueChanges()\n-    .pipe(map(participants => participants.sort((a, b) => a.sessionStartTimestamp.getTime() - b.sessionStartTimestamp)))\n-    .pipe(map(participants => participants.sort((a, b) => a.sessionStartTimestamp.getTime() - b.sessionStartTimestamp)))\n+    .pipe(map(participants => participants.sort((a, b) => a.sessionStartTimestamp.valueOf() - b.sessionStartTimestamp.valueOf())))\n   }\n   \n \n   addUserToSession(sid: string): Promise<any> | undefined {\n"
                },
                {
                    "date": 1656885864350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n   }\n \n   getParticipants(sid: string): Observable<Participant[]>  {\n     return this.firestore.collection('sessions').doc(sid).collection<Participant>('participants').valueChanges()\n-    .pipe(map(participants => participants.sort((a, b) => a.sessionStartTimestamp.valueOf() - b.sessionStartTimestamp.valueOf())))\n+    .pipe(map(participants => participants.sort((b, a) => a.sessionStartTimestamp.valueOf() - b.sessionStartTimestamp.valueOf())))\n   }\n   \n \n   addUserToSession(sid: string): Promise<any> | undefined {\n"
                },
                {
                    "date": 1656886111804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,10 +67,9 @@\n     return this.firestore.collection('sessions').doc<Session>(sid).valueChanges()\n   }\n \n   getParticipants(sid: string): Observable<Participant[]>  {\n-    return this.firestore.collection('sessions').doc(sid).collection<Participant>('participants').valueChanges()\n-    .pipe(map(participants => participants.sort((b, a) => a.sessionStartTimestamp.valueOf() - b.sessionStartTimestamp.valueOf())))\n+    return this.firestore.collection('sessions').doc(sid).collection<Participant>('participants', ref => ref.orderBy(\"sessionStartTimestamp\")).valueChanges()\n   }\n   \n \n   addUserToSession(sid: string): Promise<any> | undefined {\n"
                },
                {
                    "date": 1656886127492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,13 +66,14 @@\n   getSession(sid: string): Observable<Session | undefined> {\n     return this.firestore.collection('sessions').doc<Session>(sid).valueChanges()\n   }\n \n-  getParticipants(sid: string): Observable<Participant[]>  {\n-    return this.firestore.collection('sessions').doc(sid).collection<Participant>('participants', ref => ref.orderBy(\"sessionStartTimestamp\")).valueChanges()\n+  getParticipants(sid: string): Observable<Participant[]> {\n+    return this.firestore.collection('sessions').doc(sid)\n+      .collection<Participant>('participants', ref => ref.orderBy(\"sessionStartTimestamp\")).valueChanges()\n   }\n-  \n \n+\n   addUserToSession(sid: string): Promise<any> | undefined {\n     const uid = this.getUserUid();\n     if (uid) {\n \n"
                }
            ],
            "date": 1656713612870,
            "name": "Commit-0",
            "content": "import { Injectable } from '@angular/core';\nimport { AngularFirestore, AngularFirestoreCollection } from '@angular/fire/compat/firestore';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FirebaseService {\n\n  constructor(private firestore: AngularFirestore) { }\n\n  test(): AngularFirestoreCollection {\n    return this.firestore.collection('sessions')\n  }\n}\n"
        }
    ]
}